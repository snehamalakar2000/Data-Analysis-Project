# -*- coding: utf-8 -*-
"""DataAnalysis_SnehaMalakar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ls83L-TwcqsWFV3Fdx1VEUgTCyVKa47h

# **Project 2: Oil and Gas Summary Production Data (1967-1999)**

####Data source site: https://catalog.data.gov/dataset?res_format=CSV
####Datasheet link: https://catalog.data.gov/dataset/oil-and-gas-summary-production-data-1967-1999
"""

import pandas as pd
import numpy as np
from altair import Chart, X, Y, Color, Scale
import altair as alt

production_df = pd.read_csv('/content/drive/My Drive/Jupyter Notebook Project/Oil_and_Gas_Summary_Production_Data__1967-1999.csv')
production_df.head()

"""#**Data Column meanings:**

1. **Production Year**: The year during which the oil and gas are produced. 
2. **Production date entered**: The date of production inputted by the operator.
3.**Operator**: The company or individual that are responsible and have the legal authority to drill wells and undertake the production of hydrocarbons that are found.
4. **County**: Specific region of a state or country where the oil and gas wells are located at.
5. **Town**: The town where the oil and gas wells are located at. 
6. **Field**: The geographical area under which an oil or gas reservoir lies.
7. **Producing formation**: The area where there is an underground rock formation from which oil, gas or water is produced
8. **Active oil wells**: Number of wells that are currently producing oil. 
9. **Inactive oil wells**: Number of wells that have not produced oil in 12 months.
10. **Active gas wells**: Number of wells that are currently producing gas. 
11. **Inactive gas wells**: Number of wells that have not produced gas in 12 months.  
12. **Injection wells**: An injection well is used to place fluid underground into porous geologic formations. This could be steam, carbon dioxide, water or other substances to help maintain reservoir pressure, heat the oil or lower its viscosity, allowing it to flow to a producing well nearby.
13. **Disposal wells**: Number of depleted oil or gas wells, into which waste fluids can be injected for safe disposal (extra info: Water specific to fracture return may be recycled for further use, or disposed by injection into deep subsurface formations, through a disposal well.)
14. **Self-use well**: 
15. **Oil produced (bbl)**: Total number of barrels of oil produced by the active oil wells. 
16. **Gas produced (mcf)**: Amount of gas, in Mille Cubic Feet or 1000 cubic feet,  produced by active gas wells.
17. **Water produced (bbl)**: Total number of barrels of water produced by the active oil and gas wells.
18. **Taxable gas (mcf)**: Amount of gas, in Mille Cubic Feet or 1000 cubic feet, that can be taxed. 
19. **Purchaser codes**: Specifies a code to specify the purchaser who normally handles this vendor's account.
20. **Location**: The country, state, and longitude and latitude 


"""

from google.colab import drive
drive.mount('/content/drive')

"""#**Cleaning the Data:**

####First let's check which columns have empty observations.
"""

production_df.shape

production_df.info()

"""####Since there are supposed to be 30,053 observations in total, we can see that the County, Town, Field, Producing Formation, Self-Use Well, and Purchaser Codes columns have empty rows. We will now remove these empty rows. We will not bother about the Self-Use Well and Purchaser Codes columns since those are not used in our analysis. 

"""

production_df = production_df.loc[production_df['County'].notnull()]
production_df = production_df.loc[production_df['Town'].notnull()]
production_df = production_df.loc[production_df['Field'].notnull()]
production_df = production_df.loc[production_df['Producing Formation'].notnull()]
production_df.shape

"""####Since the observations have decreased from 30,053 to 28,357, the null rows have been removed.

#**Analysis Questions:**


---


###**1) The Renewable Energy movement started during the 1970s. Assuming that this movement would decrease the dependency on natural gas and oil by making people more aware, do the number of active  oil and gas wells decrease over the years? Can we also see the same effect on the number of disposal wells?**


---

#### First, we will make a new dataframe `NR_df` which only has the columns that we need for this analysis.
"""

NR_df = production_df[['Production Year', 'Active Oil Wells', 'Active Gas Wells', 'Disposal Wells']]
NR_df.head()

"""#### We will now group by the production year to see the counts of the 5 different types of wells in each year."""

NR_df1 = NR_df.groupby('Production Year').sum()
NR_df1.head()

"""####Using the `melt()` function we will turn this dataframe from a wide form to a long form since Altair charts work best with the long form."""

NR_df1 = NR_df1.reset_index()
NR_df1.head()

NR_df1_melt = NR_df1.melt(id_vars='Production Year', value_vars=['Active Oil Wells', 'Active Gas Wells', 'Disposal Wells'])
NR_df1_melt

"""####We are now representing this melted dataframe using a line chart. """

Chart(NR_df1_melt).mark_line().encode(x='Production Year:O', y='value', color='variable')

"""#### Unfortunately, from the line chart above, we can see that the Renewable Energy movement did not decrease the number of active oil wells and gas wells. Infact, there is an increase in active gas wells significantly from 1975 which is contradictory to the purpose of the movement. We do see a decline in number of active oil wells from 1978 which might indicate more dependency on renewable sources. However, we end up having more number of active oil wells in 1999 than in 1967. For the disposal wells, there seems to be no significant change except for the brief increases in number during 1978, 1987 and 1992.

---


###**2) Which producing formation produces the highest percentage of taxable gases in each decade? Is there any formation that has been producing highest amount of taxable gas throughout the years?**

---

####We first extract the columns that we need that are Production Year, Producing Formation, Gas Produces, and Taxable Gas.
"""

TG_df = production_df[['Production Year', 'Producing Formation', 'Gas Produced, Mcf', 'Taxable Gas, Mcf']]
TG_df.head()

"""####To calculate percentage, we have to remove all rows where the Gas Produced is 0, since we do not want an undefined value. """

TG_df = TG_df.loc[TG_df['Gas Produced, Mcf'] > 0]
TG_df

"""####First, let's deal with the 1960s."""

TG_1960s = TG_df.loc[TG_df['Production Year'] < 1970]
TG_1960s = TG_1960s.sort_values(by='Production Year')
TG_1960s

"""####We will then group by Producing formation and disregard the 'Production Year' column. """

TG_1960s = TG_1960s.groupby('Producing Formation').sum()
TG_1960s = TG_1960s[[ 'Gas Produced, Mcf', 'Taxable Gas, Mcf']]
TG_1960s.head()

"""####We then have to create a new column called 'Percentage of Taxable Gas'. """

TG_1960s['Percentage of Taxable Gas'] = (TG_1960s['Taxable Gas, Mcf']/TG_1960s['Gas Produced, Mcf'] )*100
TG_1960s = TG_1960s.round(2)
TG_1960s.head()

"""####Let's represent the percentage of taxable gas of each producing formation in a bar graph and give the bar with highest percentage an orange color."""

TG_1960s = TG_1960s['Percentage of Taxable Gas']
TG_1960s = TG_1960s.reset_index()
TG_1960s.head()

Chart(TG_1960s).mark_bar().encode(x='Producing Formation:O', y='Percentage of Taxable Gas', 
                                  color=alt.condition(
                                  alt.datum['Percentage of Taxable Gas'] == TG_1960s['Percentage of Taxable Gas'].max(),  
                                  alt.value('orange'),   
                                  alt.value('steelblue')   
                                                     )).properties(width=600)

"""####From the bar graph above, we can conclude that Akron, Chemung, Clinton, Hamilton, Marcellus, and Theresa produce the highest percentage of taxable gases in the 1960s

####Let's repeat all steps for the 1970s.
"""

TG_1970s = TG_df.loc[TG_df['Production Year'] < 1980]
TG_1970s = TG_1970s.groupby('Producing Formation').sum()
TG_1970s = TG_1970s[[ 'Gas Produced, Mcf', 'Taxable Gas, Mcf']]
TG_1970s['Percentage of Taxable Gas'] = (TG_1970s['Taxable Gas, Mcf']/TG_1970s['Gas Produced, Mcf'] )*100
TG_1970s = TG_1970s.round(2)
TG_1970s = TG_1970s['Percentage of Taxable Gas']
TG_1970s = TG_1970s.reset_index()
TG_1970s.head()

Chart(TG_1970s).mark_bar().encode(x='Producing Formation:O', y='Percentage of Taxable Gas', 
                                  color=alt.condition(
                                  alt.datum['Percentage of Taxable Gas'] == TG_1970s['Percentage of Taxable Gas'].max(),  
                                  alt.value('orange'),   
                                  alt.value('steelblue')   
                                                     )).properties(width=800)

"""####From the bar graph above, we can conclude that Clinton, Hamilton, Herkimer, Onondagaoriskany, Theresa and Trenton produce the highest percentage of taxable gases in the 1970s.

####Let's repeat all steps for the 1980s.
"""

TG_1980s = TG_df.loc[TG_df['Production Year'] < 1990]
TG_1980s = TG_1980s.groupby('Producing Formation').sum()
TG_1980s = TG_1980s[[ 'Gas Produced, Mcf', 'Taxable Gas, Mcf']]
TG_1980s['Percentage of Taxable Gas'] = (TG_1980s['Taxable Gas, Mcf']/TG_1980s['Gas Produced, Mcf'] )*100
TG_1980s = TG_1980s.round(2)
TG_1980s = TG_1980s['Percentage of Taxable Gas']
TG_1980s = TG_1980s.reset_index()
TG_1980s.head()

Chart(TG_1980s).mark_bar().encode(x='Producing Formation:O', y='Percentage of Taxable Gas', 
                                  color=alt.condition(
                                  alt.datum['Percentage of Taxable Gas'] == TG_1980s['Percentage of Taxable Gas'].max(),  
                                  alt.value('orange'),   
                                  alt.value('steelblue')   
                                                     )).properties(width=1000)

"""####From the bar graph above, we can conclude that Theresa and Whirlpool produce the highest percentage of taxable gases in the 1980s.

####Let's repeat all steps for the 1990s.
"""

TG_1990s = TG_df.loc[TG_df['Production Year'] < 2000]
TG_1990s = TG_1990s.groupby('Producing Formation').sum()
TG_1990s = TG_1990s[[ 'Gas Produced, Mcf', 'Taxable Gas, Mcf']]
TG_1990s['Percentage of Taxable Gas'] = (TG_1990s['Taxable Gas, Mcf']/TG_1990s['Gas Produced, Mcf'] )*100
TG_1990s = TG_1990s.round(2)
TG_1990s = TG_1990s['Percentage of Taxable Gas']
TG_1990s = TG_1990s.reset_index()
TG_1990s.head()

Chart(TG_1990s).mark_bar().encode(x='Producing Formation:O', y='Percentage of Taxable Gas', 
                                  color=alt.condition(
                                  alt.datum['Percentage of Taxable Gas'] == TG_1990s['Percentage of Taxable Gas'].max(),  
                                  alt.value('orange'),   
                                  alt.value('steelblue')   
                                                     )).properties(width=1200)

"""####From the bar graph above, we can conclude that Chipmunk and Bradford 2nd, Littlefalls, NoneSpecified, Sodusshale produce the highest percentage of taxable gases in the 1990s.

####From the bar graphs above, we saw that there is no single producing formation which created the highest percentage of taxable gases throughout the years. However, we do see Theresa having mazimum production from the 1960s to the 1980s.

---

##**3) How has the water production changed throughout the decades? To which field has the highest water production shifted throughout the decades?**



---

####First we create a new dataframe constituting the columns we need which are Production year, Field, Water produced.
"""

Field_df = production_df.copy()[['Production Year','Field','Water produced, bbl']]
Field_df.head()

"""####We now have to create a new column called decades which gives the production years its corresponding decade. First let's create a function to do this."""

def decade(Production_Year):
  if Production_Year < 1970:
    return '1960s'
  elif Production_Year < 1980:
    return '1970s'
  elif Production_Year < 1990:
    return '1980s'
  else:
    return '1990s'

"""####Now, we will apply the `decade` function to the new column called Decade. 




"""

Field_df['Decade'] = Field_df['Production Year'].apply(decade)
Field_df.head()

"""####We will now make a pivot table with the Field column as the index and Decade coulm as the columns. The values are sum of amount of water produced in bbl."""

Field_pivot = Field_df.pivot_table(index='Field',
               columns='Decade',
               values='Water produced, bbl',
               aggfunc='sum').fillna(0)
Field_pivot.head()

Field_pivot = Field_pivot.reset_index()
Field_pivot.head()

"""####Let's represent the pivot table in a scatter plot. """

First = Chart(Field_pivot).mark_point(color = 'red').encode(x='Field',
                              y='1960s' ).interactive()
                        
Second = Chart(Field_pivot).mark_point(color = 'green').encode(x='Field',
                              y='1970s').interactive()
 
Third = Chart(Field_pivot).mark_point(color = 'orange').encode(x='Field',
                              y='1980s').interactive()
 
Fourth = Chart(Field_pivot).mark_point(color = 'blue').encode(x='Field',
                              y='1990s').interactive()
First + Second + Third + Fourth

"""####From the above analysis we can see that for decades of 1960s, 1970s and 1990s Bradford has always had the highest water production. But for the decade of 1980 Chipmunk had the highest water production.

####Lets see if Bradford and Chipmunk are in the top two Fields that produce the most Oil.
"""

BC_df = production_df[['Field','Gas Produced, Mcf']]
BC_df = BC_df.groupby('Field').sum()
BC_df = BC_df.sort_values(by = 'Gas Produced, Mcf', ascending = False)
BC_df.head()

"""####We dont see both Bradford and Chipmunk even in the top 5 which goes against the study that more gas production means higher amount of water produced. """

